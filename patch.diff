From 8b7856f05a9519a6fdcbf2790267728b99250fe4 Mon Sep 17 00:00:00 2001
From: rfd3344 <rfd3344@gmail.com>
Date: Tue, 30 Mar 2021 15:37:32 +1100
Subject: [PATCH] add test code

---
 .atom-packages                     |  18 ++++++
 .babelrc.js                        |  12 ++++
 .editorconfig                      |  12 ++++
 .eslintignore                      |   3 +
 .eslintrc.json                     |  48 ++++++++++++++
 .gitignore                         |   5 ++
 README.md                          |  63 +++++++++++++++++++
 config/server.js                   |  19 ++++++
 config/webpack.base.config.js      |  89 ++++++++++++++++++++++++++
 config/webpack.config.prod.js      |  49 +++++++++++++++
 config/webpack.dev.config.js       |  49 +++++++++++++++
 env.js                             |   5 ++
 env.js.example                     |   5 ++
 package.json                       |  74 ++++++++++++++++++++++
 public/entry.html                  |  17 +++++
 src/actions/todos.js               |  17 +++++
 src/constants/ActionTypes.js       |  10 +++
 src/constants/PriorityOptions.js   |   8 +++
 src/constants/TodosColumn.js       |   8 +++
 src/containers/DevTools.js         |   0
 src/helper/arrayHelper.js          |  19 ++++++
 src/helper/objectHelper.js         |   0
 src/helper/typeHelper.js           |   9 +++
 src/index.jsx                      |  22 +++++++
 src/pages/Home/index.js            |  12 ++++
 src/pages/Home/style.less          |   3 +
 src/pages/NotFound/index.js        |   9 +++
 src/pages/Todos/TodosAddNew.js     |  55 ++++++++++++++++
 src/pages/Todos/TodosBadges.js     |  32 ++++++++++
 src/pages/Todos/TodosItem.js       |  43 +++++++++++++
 src/pages/Todos/TodosList.js       |  59 ++++++++++++++++++
 src/pages/Todos/index.js           |  21 +++++++
 src/pages/Todos/style.less         |  75 ++++++++++++++++++++++
 src/reducers.js                    |  10 +++
 src/reducers/todos.js              |  97 +++++++++++++++++++++++++++++
 src/static/img/avatar.jpg          | Bin 0 -> 626 bytes
 src/style.less                     |  31 +++++++++
 src/themes/PageTheme.js            |  13 ++++
 src/themes/Routers.js              |  16 +++++
 src/themes/page.less               |   1 +
 src/utilis/todos.js                |  41 ++++++++++++
 tests/data/initialState.js         |  32 ++++++++++
 tests/unit/todos/component.test.js |  89 ++++++++++++++++++++++++++
 tests/unit/todos/reducer.test.js   |  73 ++++++++++++++++++++++
 44 files changed, 1273 insertions(+)
 create mode 100644 .atom-packages
 create mode 100644 .babelrc.js
 create mode 100644 .editorconfig
 create mode 100644 .eslintignore
 create mode 100644 .eslintrc.json
 create mode 100644 .gitignore
 create mode 100644 README.md
 create mode 100644 config/server.js
 create mode 100644 config/webpack.base.config.js
 create mode 100644 config/webpack.config.prod.js
 create mode 100644 config/webpack.dev.config.js
 create mode 100644 env.js
 create mode 100644 env.js.example
 create mode 100644 package.json
 create mode 100644 public/entry.html
 create mode 100644 src/actions/todos.js
 create mode 100644 src/constants/ActionTypes.js
 create mode 100644 src/constants/PriorityOptions.js
 create mode 100644 src/constants/TodosColumn.js
 create mode 100644 src/containers/DevTools.js
 create mode 100644 src/helper/arrayHelper.js
 create mode 100644 src/helper/objectHelper.js
 create mode 100644 src/helper/typeHelper.js
 create mode 100644 src/index.jsx
 create mode 100644 src/pages/Home/index.js
 create mode 100644 src/pages/Home/style.less
 create mode 100644 src/pages/NotFound/index.js
 create mode 100644 src/pages/Todos/TodosAddNew.js
 create mode 100644 src/pages/Todos/TodosBadges.js
 create mode 100644 src/pages/Todos/TodosItem.js
 create mode 100644 src/pages/Todos/TodosList.js
 create mode 100644 src/pages/Todos/index.js
 create mode 100644 src/pages/Todos/style.less
 create mode 100644 src/reducers.js
 create mode 100644 src/reducers/todos.js
 create mode 100644 src/static/img/avatar.jpg
 create mode 100644 src/style.less
 create mode 100644 src/themes/PageTheme.js
 create mode 100644 src/themes/Routers.js
 create mode 100644 src/themes/page.less
 create mode 100644 src/utilis/todos.js
 create mode 100644 tests/data/initialState.js
 create mode 100644 tests/unit/todos/component.test.js
 create mode 100644 tests/unit/todos/reducer.test.js

diff --git a/.atom-packages b/.atom-packages
new file mode 100644
index 0000000..9e5c31e
--- /dev/null
+++ b/.atom-packages
@@ -0,0 +1,18 @@
+editorconfig
+simple-drag-drop-text
+linter-eslint
+merge-conflicts
+minimap
+open-this
+seti-icons
+tree-view-copy-relative-path
+markdown-scroll-sync
+markdown-toolbar
+git-time-machine
+block-comment-plus
+atom-beautify
+Sublime-Style-Column-Selection
+language-ignore
+tree-ignore
+zentabs
+rainbow-tabs
diff --git a/.babelrc.js b/.babelrc.js
new file mode 100644
index 0000000..f59e6ac
--- /dev/null
+++ b/.babelrc.js
@@ -0,0 +1,12 @@
+
+module.exports = {
+	presets: ['@babel/preset-env', '@babel/preset-react'],
+	"plugins": [
+		[
+			"@babel/plugin-transform-runtime",
+			{
+				"regenerator": true
+			}
+		]
+	]
+};
diff --git a/.editorconfig b/.editorconfig
new file mode 100644
index 0000000..60fb531
--- /dev/null
+++ b/.editorconfig
@@ -0,0 +1,12 @@
+# http://editorconfig.org
+root                     = true
+[*]
+indent_style             = tab
+indent_size              = 4
+end_of_line              = lf
+charset                  = utf-8
+trim_trailing_whitespace = true
+insert_final_newline     = true
+
+[*.md]
+trim_trailing_whitespace = false
diff --git a/.eslintignore b/.eslintignore
new file mode 100644
index 0000000..032961f
--- /dev/null
+++ b/.eslintignore
@@ -0,0 +1,3 @@
+docs/*
+node_modules/*
+public/dist/*
diff --git a/.eslintrc.json b/.eslintrc.json
new file mode 100644
index 0000000..d3885ce
--- /dev/null
+++ b/.eslintrc.json
@@ -0,0 +1,48 @@
+{
+	"extends": "airbnb",
+	"parser": "babel-eslint",
+	"settings": {
+		"import/resolver": {
+			"node": {
+				"extensions": [
+					".js",
+					".jsx"
+				]
+			}
+		}
+	},
+	"env": {
+		"browser": true,
+		"commonjs": true,
+		"shared-node-browser": true,
+		"mocha": true,
+		"es6":true,
+		"worker":true,
+		"phantomjs":true
+	},
+	"plugins": [
+		"chai-expect"
+	],
+	"rules": {
+		"indent": ["error", "tab"],
+		"no-tabs": 0,
+		"prefer-arrow-callback": 0,
+		"func-names": 0,
+		"max-len": ["warn", {"code": 200}],
+		"linebreak-style": 0,
+		"import/no-unresolved": 0,
+		"no-plusplus": 0,
+		"no-restricted-globals": 0,
+		"no-multiple-empty-lines": 0,
+		"import/extensions": 0,
+		"react/jsx-indent": ["error", "tab"],
+		"react/jsx-indent-props": 0,
+		"react/jsx-filename-extension": [1, {"extensions": [".js", ".jsx"]}],
+		"jsx-a11y/label-has-associated-control": 0,
+		"import/prefer-default-export": 0,
+		"no-restricted-syntax": 0,
+		"no-prototype-builtins": 0,
+		"jsx-a11y/click-events-have-key-events": 0,
+		"jsx-a11y/no-static-element-interactions": 0
+	}
+}
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..669a7ae
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,5 @@
+.DS_Store
+package-lock.json
+/node_modules
+/public/dist
+/public/index.html
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..0707c0b
--- /dev/null
+++ b/README.md
@@ -0,0 +1,63 @@
+
+
+# Table of Contents #
+<!-- START doctoc generated TOC please keep comment here to allow auto update -->
+<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
+
+
+- [Project Dscription](#project-dscription)
+- [Branches](#branches)
+  - [master](#master)
+  - [jh-webpack](#jh-webpack)
+  - [jh-react](#jh-react)
+- [Changlog](#changlog)
+- [Temp Notes](#temp-notes)
+- [Installation](#installation)
+    - [install Atom package](#install-atom-package)
+
+<!-- END doctoc generated TOC please keep comment here to allow auto update -->
+
+# Project Dscription
+jh-frontend is a template for frontend page:
+https://github.com/rfd3344/jh-frontend
+
+
+
+# Branches
+
+
+## master
+This is a frontend template. <br/>
+Tech used:
+
+
+# Changlog
+Details see: [ChangeLog](./docs/ChangeLog.md#)
+
+
+# packages
+- webpack
+- babel
+- Karma, Mocha, Chai
+- Eslint and airbnb
+- Less
+- React and
+- Redux
+- material UI
+
+
+
+## other packages
+
+### doctoc
+create documents
+
+
+
+
+# Installation
+- npm install
+- npm start
+
+## install Atom package
+- apm install --compatible --packages-file .atom-packages
diff --git a/config/server.js b/config/server.js
new file mode 100644
index 0000000..898cb75
--- /dev/null
+++ b/config/server.js
@@ -0,0 +1,19 @@
+const path = require('path');
+const express = require('express');
+const ENV = require('../env.js');
+
+const PUBLIC_DIR = path.join(__dirname, '../public');
+
+const app = express();
+
+// Serving the files on the dist folder
+app.use(express.static(PUBLIC_DIR));
+
+// Send index.html when the user access the web
+app.get('*', function (req, res) {
+	res.sendFile(path.join(PUBLIC_DIR, 'index.html'));
+});
+
+app.listen(ENV.PORT, function () {
+	console.log('Server is listening http://localhost:' + ENV.PORT); // eslint-disable-line
+});
diff --git a/config/webpack.base.config.js b/config/webpack.base.config.js
new file mode 100644
index 0000000..6a6409a
--- /dev/null
+++ b/config/webpack.base.config.js
@@ -0,0 +1,89 @@
+const path = require('path');
+const webpack = require('webpack');
+
+
+const entryConfig = {
+	main: path.resolve(__dirname, '../src/index.jsx'),
+};
+
+const outputConfig = {
+	filename: './dist/[name].bundle.js',
+	path: path.resolve(__dirname, '../public/'),
+	publicPath: '/',
+};
+
+const moduleConfig = {
+	rules: [
+		{
+			test: /\.(js|jsx)$/,
+			exclude: /(node_modules|bower_components)/,
+			use: [
+				{
+					loader: 'babel-loader',
+					options: {
+						presets: ['@babel/preset-env', '@babel/preset-react'],
+						plugins: ['@babel/plugin-transform-runtime'],
+					},
+				},
+				// closed eslint check, reduce info generate in Terminal
+				// { loader: 'eslint-loader' },
+			],
+		},
+		{
+			test: /\.(less|css)$/,
+			use: [
+				{ loader: 'style-loader' },
+				{ loader: 'css-loader' },
+				{ loader: 'less-loader' },
+			],
+		},
+		{
+			test: /\.(png|jpg|gif)$/,
+			use: [{ loader: 'file-loader' }],
+		},
+	],
+};
+
+const resolveConfig = {
+	alias: {
+		// Define directory with alias name. usage:
+		// import AxiosMethod from 'utilis/AxiosMethod';
+		_src: path.resolve(__dirname, '../src/'),
+		_utilis: path.resolve(__dirname, '../src/utilis'),
+		_helper: path.resolve(__dirname, '../src/helper'),
+		_static: path.resolve(__dirname, '../src/static'),
+		_constants: path.resolve(__dirname, '../src/constants'),
+		_actions: path.resolve(__dirname, '../src/actions'),
+		_reducers: path.resolve(__dirname, '../src/reducers'),
+		_layout: path.resolve(__dirname, '../src/layout'),
+		_pages: path.resolve(__dirname, '../src/pages'),
+
+		_tests: path.resolve(__dirname, '../tests'),
+		_testData: path.resolve(__dirname, '../tests/testData'),
+		_testHelper: path.resolve(__dirname, '../tests/testHelper'),
+	},
+};
+
+const performanceConfig = {
+	hints: 'warning',
+	maxEntrypointSize: 4000000,
+	maxAssetSize: 4000000,
+};
+
+const pluginsConfig = [
+	new webpack.NamedModulesPlugin(),
+];
+
+const nodeConfig = {
+	fs: 'empty',
+};
+
+module.exports = {
+	entry: entryConfig,
+	output: outputConfig,
+	module: moduleConfig,
+	resolve: resolveConfig,
+	performance: performanceConfig,
+	plugins: pluginsConfig,
+	node: nodeConfig,
+};
diff --git a/config/webpack.config.prod.js b/config/webpack.config.prod.js
new file mode 100644
index 0000000..ea83e0d
--- /dev/null
+++ b/config/webpack.config.prod.js
@@ -0,0 +1,49 @@
+const webpack = require('webpack');
+const merge = require('webpack-merge');
+const UglifyJSPlugin = require('uglifyjs-webpack-plugin');
+const HtmlWebpackPlugin = require('html-webpack-plugin');
+const webpackBaseConfig = require('./webpack.base.config.js');
+const packageJson = require('../package.json');
+
+const pluginsConfig = [
+	new HtmlWebpackPlugin({
+		template: './public/entry.html',
+		filename: './index.html',
+		inject: 'body',
+	}),
+	new webpack.DefinePlugin({
+		__VERSION__: packageJson.version,
+	}),
+];
+
+const optimizationConfig = {
+	minimizer: [
+		new UglifyJSPlugin({
+			sourceMap: true,
+			uglifyOptions: {
+				compress: {
+					inline: false,
+				},
+			},
+		}),
+	],
+	runtimeChunk: true,
+	splitChunks: {
+		cacheGroups: {
+			default: false,
+			commons: {
+				test: /[\\/]node_modules[\\/]/,
+				name: 'vendor_app',
+				chunks: 'all',
+				minChunks: 2,
+			},
+		},
+	},
+};
+
+
+module.exports = merge(webpackBaseConfig, {
+	mode: 'production',
+	plugins: pluginsConfig,
+	optimization: optimizationConfig,
+});
diff --git a/config/webpack.dev.config.js b/config/webpack.dev.config.js
new file mode 100644
index 0000000..2132a0a
--- /dev/null
+++ b/config/webpack.dev.config.js
@@ -0,0 +1,49 @@
+const path = require('path');
+const merge = require('webpack-merge');
+const webpack = require('webpack');
+const HtmlWebpackPlugin = require('html-webpack-plugin');
+
+const webpackBaseConfig = require('./webpack.base.config.js');
+const ENV = require('../env.js');
+
+const devServerConfig = {
+	port: ENV.PORT,
+	open: true,
+	hot: true,
+	historyApiFallback: true,
+	contentBase: path.join(__dirname, '../public'),
+	host: 'localhost',
+	publicPath: '/',
+	// lazy: true,
+	filename: 'bundle.js',
+	// overlay: {
+	// 	warnings: true,
+	// 	errors: true,
+	// }
+};
+
+const pluginsConfig = [
+	new webpack.HotModuleReplacementPlugin(),
+	new HtmlWebpackPlugin({
+		template: './public/entry.html',
+		filename: 'index.html',
+		inject: 'body',
+	}),
+	new webpack.DefinePlugin({
+		jhDebug: true,
+	}),
+];
+
+module.exports = merge(webpackBaseConfig, {
+	mode: 'development',
+	devServer: devServerConfig,
+	devtool: 'source-map',
+	plugins: pluginsConfig,
+	// watch: true,
+	// watchOptions: {
+	// 	aggregateTimeout: 300,
+	// 	poll: 1000,
+	// 	ignored: ['node_modules'],
+	// },
+
+});
diff --git a/env.js b/env.js
new file mode 100644
index 0000000..0796e53
--- /dev/null
+++ b/env.js
@@ -0,0 +1,5 @@
+module.exports = {
+	DEBUG: true,
+	PORT: 8888,
+	// USERNAME: 'username',
+};
diff --git a/env.js.example b/env.js.example
new file mode 100644
index 0000000..0796e53
--- /dev/null
+++ b/env.js.example
@@ -0,0 +1,5 @@
+module.exports = {
+	DEBUG: true,
+	PORT: 8888,
+	// USERNAME: 'username',
+};
diff --git a/package.json b/package.json
new file mode 100644
index 0000000..717276d
--- /dev/null
+++ b/package.json
@@ -0,0 +1,74 @@
+{
+  "name": "jh-frontend",
+  "version": "1.0.0",
+  "license": "UNLICENSED",
+  "description": "Coding Test",
+  "author": "Eric Li <rfd3344@gmail.com>",
+  "repository": {
+    "type": "git",
+    "url": "https://github.com/rfd3344/jh-frontend.git"
+  },
+  "main": "./dist/index.js",
+  "scripts": {
+    "dev": "npm run dev1",
+    "dev1": "webpack-dev-server --config config/webpack.dev.config.js",
+    "karma": "karma start config/karma.conf.js",
+    "start": "npm i && npm run build && npm run server",
+    "build": " npm run clean && npm run build1",
+    "build1": "webpack --config config/webpack.config.prod.js",
+    "inup": "npm install && npm update",
+    "clean": "rimraf public/dist/* && rimraf public/index.html",
+    "lint": "eslint src/ && eslint tests/",
+    "test": "jest",
+    "server": "node config/server.js"
+  },
+  "dependencies": {
+    "@babel/polyfill": "^7.12.1",
+    "@material-ui/core": "^4.11.2",
+    "babel-loader": "^8.2.2",
+    "css-loader": "^3.6.0",
+    "express": "^4.17.1",
+    "file-loader": "^4.2.0",
+    "html-webpack-plugin": "^3.2.0",
+    "less": "^3.13.1",
+    "less-loader": "^5.0.0",
+    "lodash": "^4.17.20",
+    "prop-types": "^15.7.2",
+    "react": "^16.14.0",
+    "react-dom": "^16.14.0",
+    "react-redux": "^7.2.2",
+    "react-router-dom": "^5.2.0",
+    "redux": "^4.0.5",
+    "redux-saga": "^1.1.3",
+    "save": "^2.4.0",
+    "style-loader": "^1.3.0",
+    "uuid": "^8.3.2",
+    "webpack": "^4.44.2",
+    "webpack-merge": "^4.2.2"
+  },
+  "devDependencies": {
+    "@babel/core": "^7.13.10",
+    "@babel/plugin-transform-runtime": "^7.13.10",
+    "@babel/preset-env": "^7.13.10",
+    "@babel/preset-react": "^7.12.10",
+    "@babel/runtime": "^7.13.10",
+    "@testing-library/react": "^11.2.5",
+    "babel-eslint": "^10.1.0",
+    "chai": "^4.3.4",
+    "eslint": "^6.8.0",
+    "eslint-config-airbnb": "^18.2.1",
+    "eslint-loader": "^3.0.4",
+    "eslint-plugin-chai-expect": "^2.2.0",
+    "eslint-plugin-import": "^2.22.1",
+    "eslint-plugin-jsx-a11y": "^6.4.1",
+    "eslint-plugin-react": "^7.22.0",
+    "eslint-plugin-react-hooks": "^1.7.0",
+    "jest": "^24.9.0",
+    "mocha": "^6.2.3",
+    "redux-logger": "^3.0.6",
+    "redux-mock-store": "^1.5.4",
+    "uglifyjs-webpack-plugin": "^2.2.0",
+    "webpack-cli": "^3.3.12",
+    "webpack-dev-server": "^3.11.1"
+  }
+}
diff --git a/public/entry.html b/public/entry.html
new file mode 100644
index 0000000..c267f86
--- /dev/null
+++ b/public/entry.html
@@ -0,0 +1,17 @@
+<!DOCTYPE html>
+<html lang="en">
+	<head>
+		<meta charset="utf-8">
+		<meta name="viewport" content="width=device-width, initial-scale=1">
+		<title> jh-title</title>
+		<link rel="shortcut icon" href="./assets/img/icon.png">
+		<!-- Google Icon -->
+		<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
+		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css" integrity="sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l" crossorigin="anonymous">
+
+	</head>
+	<body>
+		<div id="root">	</div>
+		<!-- ended -->
+	</body>
+</html>
diff --git a/src/actions/todos.js b/src/actions/todos.js
new file mode 100644
index 0000000..0c36177
--- /dev/null
+++ b/src/actions/todos.js
@@ -0,0 +1,17 @@
+import { v4 as uuidv4 } from 'uuid';
+import ActionTypes from '../constants/ActionTypes';
+
+export const addTodo = (name, priority) => ({
+	type: ActionTypes.ADD_TODO,
+	id: uuidv4(),
+	name,
+	priority,
+});
+export const toggleTodo = (id) => ({
+	type: ActionTypes.TOGGLE_TODO,
+	id,
+});
+export const deleteTodo = (id) => ({
+	type: ActionTypes.DELETE_TODO,
+	id,
+});
diff --git a/src/constants/ActionTypes.js b/src/constants/ActionTypes.js
new file mode 100644
index 0000000..5056d59
--- /dev/null
+++ b/src/constants/ActionTypes.js
@@ -0,0 +1,10 @@
+import { arrayToEnum } from '../helper/arrayHelper';
+
+const ActionTypes = [
+	'ADD_TODO',
+	'TOGGLE_TODO',
+	'DELETE_TODO',
+	'OTHER_ACTION',
+];
+
+export default arrayToEnum(ActionTypes);
diff --git a/src/constants/PriorityOptions.js b/src/constants/PriorityOptions.js
new file mode 100644
index 0000000..df2638f
--- /dev/null
+++ b/src/constants/PriorityOptions.js
@@ -0,0 +1,8 @@
+
+const PriorityOptions = {
+	LOW: 'low',
+	MEDIUM: 'medium',
+	HIGH: 'high',
+};
+
+export default PriorityOptions;
diff --git a/src/constants/TodosColumn.js b/src/constants/TodosColumn.js
new file mode 100644
index 0000000..7f4439c
--- /dev/null
+++ b/src/constants/TodosColumn.js
@@ -0,0 +1,8 @@
+
+const TodosColumn = {
+	NAME: 'name',
+	PRIORITY: 'priority',
+	ACTIONS: 'actions',
+};
+
+export default TodosColumn;
diff --git a/src/containers/DevTools.js b/src/containers/DevTools.js
new file mode 100644
index 0000000..e69de29
diff --git a/src/helper/arrayHelper.js b/src/helper/arrayHelper.js
new file mode 100644
index 0000000..55c155e
--- /dev/null
+++ b/src/helper/arrayHelper.js
@@ -0,0 +1,19 @@
+
+/**
+ * Transfer array to Enumeration.
+ *
+ * @param {array} arr
+ * @returns {object} Returns read only enumeration
+ * @since 1.0.0
+ * @example
+ *
+ * arrayToEnum(['Enum1', 'Enum2'])
+ * => {Enum1: 'Enum1', Enum2: 'Enum2'}
+ */
+export function arrayToEnum(arr) {
+	const res = arr.reduce((obj, item) => {
+		obj[item] = item; // eslint-disable-line no-param-reassign
+		return obj;
+	}, {});
+	return Object.freeze(res);
+}
diff --git a/src/helper/objectHelper.js b/src/helper/objectHelper.js
new file mode 100644
index 0000000..e69de29
diff --git a/src/helper/typeHelper.js b/src/helper/typeHelper.js
new file mode 100644
index 0000000..f17db6a
--- /dev/null
+++ b/src/helper/typeHelper.js
@@ -0,0 +1,9 @@
+/**
+ * If value is undefined, set to null.
+ *
+ * @param {any} value
+ * @returns {any} value or null if value is undefined
+ */
+export function setUndefinedToNull(value) {
+	return typeof value !== 'undefined' ? value : null;
+}
diff --git a/src/index.jsx b/src/index.jsx
new file mode 100644
index 0000000..cba8da1
--- /dev/null
+++ b/src/index.jsx
@@ -0,0 +1,22 @@
+import '@babel/polyfill';
+import React from 'react';
+import ReactDOM from 'react-dom';
+import { BrowserRouter } from 'react-router-dom';
+import { createStore } from 'redux';
+import { Provider } from 'react-redux';
+
+import './style.less';
+import PageTheme from '_src/themes/PageTheme';
+import rootReducer from './reducers';
+
+// Redux initialze
+const store = createStore(rootReducer);
+
+ReactDOM.render(
+	<Provider store={store}>
+		<BrowserRouter>
+			<PageTheme />
+		</BrowserRouter>
+	</Provider>,
+	document.getElementById('root'),
+);
diff --git a/src/pages/Home/index.js b/src/pages/Home/index.js
new file mode 100644
index 0000000..0f9b269
--- /dev/null
+++ b/src/pages/Home/index.js
@@ -0,0 +1,12 @@
+import React from 'react';
+import { NavLink } from 'react-router-dom';
+import './style.less';
+
+export default function Home() {
+	return (
+		<section id="home">
+			<NavLink to="/"> Home </NavLink>
+			<NavLink to="/todos"> Todos Coding test </NavLink>
+		</section>
+	);
+}
diff --git a/src/pages/Home/style.less b/src/pages/Home/style.less
new file mode 100644
index 0000000..5e774ca
--- /dev/null
+++ b/src/pages/Home/style.less
@@ -0,0 +1,3 @@
+#home a{
+	display: block;
+}
diff --git a/src/pages/NotFound/index.js b/src/pages/NotFound/index.js
new file mode 100644
index 0000000..6e5ab51
--- /dev/null
+++ b/src/pages/NotFound/index.js
@@ -0,0 +1,9 @@
+import React from 'react';
+
+export default function NotFound() {
+	return (
+		<section id="NotFound">
+			<h1> 404 page not found </h1>
+		</section>
+	);
+}
diff --git a/src/pages/Todos/TodosAddNew.js b/src/pages/Todos/TodosAddNew.js
new file mode 100644
index 0000000..e6e8ace
--- /dev/null
+++ b/src/pages/Todos/TodosAddNew.js
@@ -0,0 +1,55 @@
+import React, { useState } from 'react';
+import PropTypes from 'prop-types';
+import { connect } from 'react-redux';
+import { addTodo } from '../../actions/todos';
+import PriorityOptions from '../../constants/PriorityOptions';
+
+const TodosAddNew = ({ triggerAdd }) => {
+	const [name, setName] = useState('');
+	const [priority, setPriority] = useState('low');
+
+	const handleNameChange = (e) => {
+		setName(e.target.value);
+	};
+
+	const handlePriorityChange = (e) => {
+		setPriority(e.target.value);
+	};
+
+	const handleSubmit = (e) => {
+		e.preventDefault();
+		triggerAdd(name, priority);
+	};
+	return (
+		<div className="TodosAddNew">
+			<form onSubmit={handleSubmit}>
+				<div className="form-row">
+					<div className="col-md-6 col-12 mb-3">
+						<input type="text" className="form-control" required value={name} onChange={handleNameChange} />
+					</div>
+					<div className="col-md-4 col-8 mb-2">
+						<select value={priority} onChange={handlePriorityChange} className="custom-select">
+							<option value={PriorityOptions.LOW}>{PriorityOptions.LOW}</option>
+							<option value={PriorityOptions.MEDIUM}>{PriorityOptions.MEDIUM}</option>
+							<option value={PriorityOptions.HIGH}>{PriorityOptions.HIGH}</option>
+						</select>
+					</div>
+					<div className="col-md-2 col-4 mb-1">
+						<input type="submit" className="btn btn-info" value="Add" />
+					</div>
+				</div>
+			</form>
+		</div>
+	);
+};
+
+TodosAddNew.propTypes = {
+	triggerAdd: PropTypes.func.isRequired,
+};
+
+const mapDispatchToProps = (dispatch) => ({
+	triggerAdd: (name, priority) => dispatch(addTodo(name, priority)),
+});
+
+
+export default connect(null, mapDispatchToProps)(TodosAddNew);
diff --git a/src/pages/Todos/TodosBadges.js b/src/pages/Todos/TodosBadges.js
new file mode 100644
index 0000000..6b27ebf
--- /dev/null
+++ b/src/pages/Todos/TodosBadges.js
@@ -0,0 +1,32 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { connect } from 'react-redux';
+
+function TodosBadges({ totalNum, completedNum }) {
+	return (
+		<div className="TodosBadges">
+			<span className="badge badge-pill badge-primary px-4 py-2">
+				Total:
+				{totalNum}
+			</span>
+			<span className="badge badge-pill badge-success px-4 py-2">
+				Completed:
+				{completedNum}
+			</span>
+		</div>
+	);
+}
+
+
+TodosBadges.propTypes = {
+	totalNum: PropTypes.number.isRequired,
+	completedNum: PropTypes.number.isRequired,
+};
+
+const mapStateToProps = (state) => ({
+	totalNum: state.todos.totalNum,
+	completedNum: state.todos.completedNum,
+});
+
+
+export default connect(mapStateToProps)(TodosBadges);
diff --git a/src/pages/Todos/TodosItem.js b/src/pages/Todos/TodosItem.js
new file mode 100644
index 0000000..e5a77e7
--- /dev/null
+++ b/src/pages/Todos/TodosItem.js
@@ -0,0 +1,43 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { connect } from 'react-redux';
+import { toggleTodo, deleteTodo } from '../../actions/todos';
+
+function TodosItem({
+	itemId, name, priority, completed,
+	handleComplete, handleDelete,
+}) {
+	let itemClassName = completed ? 'completed ' : 'pending ';
+	itemClassName += 'list-group-item TodosItem';
+
+	return (
+		<li className={itemClassName}>
+			<span className="name">
+				{name}
+			</span>
+			<span className={`${priority} priority`}>
+				{priority}
+			</span>
+			<span className="actions">
+				<input type="checkbox" checked={completed} onChange={handleComplete.bind(null, itemId)} />
+				<i className="material-icons" onClick={handleDelete.bind(null, itemId)}>delete</i>
+			</span>
+		</li>
+	);
+}
+
+const mapDispatchToProps = (dispatch) => ({
+	handleComplete: (id) => dispatch(toggleTodo(id)),
+	handleDelete: (id) => dispatch(deleteTodo(id)),
+});
+
+TodosItem.propTypes = {
+	itemId: PropTypes.string.isRequired,
+	name: PropTypes.string.isRequired,
+	priority: PropTypes.string.isRequired,
+	completed: PropTypes.bool.isRequired,
+	handleComplete: PropTypes.func.isRequired,
+	handleDelete: PropTypes.func.isRequired,
+};
+
+export default connect(null, mapDispatchToProps)(TodosItem);
diff --git a/src/pages/Todos/TodosList.js b/src/pages/Todos/TodosList.js
new file mode 100644
index 0000000..e4a7906
--- /dev/null
+++ b/src/pages/Todos/TodosList.js
@@ -0,0 +1,59 @@
+import React, { useState } from 'react';
+import PropTypes from 'prop-types';
+import { connect } from 'react-redux';
+import { sortTodosList } from '../../utilis/todos';
+import TodosColumn from '../../constants/TodosColumn';
+import TodosItem from './TodosItem';
+
+function TodosList({ todosData }) {
+	const [sortBy, setSortBy] = useState(TodosColumn.NAME);
+
+	const handleNameClick = () => {
+		setSortBy(TodosColumn.NAME);
+	};
+	const handlePriorityClick = () => {
+		setSortBy(TodosColumn.PRIORITY);
+	};
+	const sortedList = sortTodosList(todosData, sortBy);
+
+	return (
+		<ul className="TodosList list-group">
+			<li className="list-group-item header">
+				<span className="name" onClick={handleNameClick}>
+					{TodosColumn.NAME}
+				</span>
+				<span className="priority" onClick={handlePriorityClick}>
+					{TodosColumn.PRIORITY}
+				</span>
+				<span className="actions">
+					{TodosColumn.ACTIONS}
+				</span>
+			</li>
+			{sortedList.map((item) => (
+				<TodosItem
+					key={item.id}
+					itemId={item.id}
+					priority={item.priority}
+					completed={item.completed}
+					name={item.name}
+				/>
+			))}
+		</ul>
+	);
+}
+
+TodosList.propTypes = {
+	todosData: PropTypes.arrayOf(
+		PropTypes.shape({
+			id: PropTypes.string.isRequired,
+			name: PropTypes.string.isRequired,
+			priority: PropTypes.string.isRequired,
+			completed: PropTypes.bool.isRequired,
+		}),
+	).isRequired,
+};
+
+const mapStateToProps = (state) => ({
+	todosData: state.todos.list,
+});
+export default connect(mapStateToProps)(TodosList);
diff --git a/src/pages/Todos/index.js b/src/pages/Todos/index.js
new file mode 100644
index 0000000..7f828b9
--- /dev/null
+++ b/src/pages/Todos/index.js
@@ -0,0 +1,21 @@
+import React from 'react';
+
+import TodosBadges from './TodosBadges';
+import TodosAddNew from './TodosAddNew';
+import TodosList from './TodosList';
+import './style.less';
+
+export default function Todos() {
+	return (
+		<section className="Todos container">
+			<div className="row justify-content-center">
+				<div className="col-md-6 col-12 alert alert-info">
+					<h1> Todos List </h1>
+					<TodosAddNew />
+					<TodosBadges />
+					<TodosList />
+				</div>
+			</div>
+		</section>
+	);
+}
diff --git a/src/pages/Todos/style.less b/src/pages/Todos/style.less
new file mode 100644
index 0000000..ab4f279
--- /dev/null
+++ b/src/pages/Todos/style.less
@@ -0,0 +1,75 @@
+.Todos {
+	.TodosAddNew {
+		input[type=submit] {
+			width: 100%;
+		}
+	}
+	.TodosBadges {
+		display:flex;
+		justify-content: space-between;
+		margin-bottom:5px;
+		font-size: 1.2em;
+	}
+	.TodosList {
+		background: white;
+		li {
+			display: flex;
+		}
+		.header {
+			.name:hover,
+			.priority:hover {
+				cursor: pointer;
+			}
+		}
+
+		.name {
+			flex-grow: 1;
+		}
+		.priority {
+			flex-basis: 100px;
+		}
+		.actions {
+			flex-basis: 50px;
+			input[type=checkbox] {
+				/* Double-sized Checkboxes */
+				-ms-transform: scale(2); /* IE */
+				-moz-transform: scale(2); /* FF */
+				-webkit-transform: scale(2); /* Safari and Chrome */
+				-o-transform: scale(2); /* Opera */
+				transform: scale(2);
+				padding: 10px;
+				margin-right: 10px;
+			}
+			.material-icons {
+				font-size: 26px;
+				transform: translateY(5px);
+				&:hover {
+					cursor: pointer;
+				}
+			}
+		}
+		.TodosItem {
+			&.completed {
+				opacity: 0.4;
+			}
+			.priority:before {
+				content:'circle';
+				font-family: 'Material Icons';
+				padding-right: 2px;
+				display: inline-block;
+				transform: translateY(3px);
+			}
+			.priority {
+				&.high:before {
+					color:rgb(245, 54, 92);
+				}
+				&.medium:before {
+					color:rgb(255, 187, 51);
+				}
+				&.low:before {
+					color:rgb(17, 205, 239);
+				}
+			}
+		}
+	}
+}
diff --git a/src/reducers.js b/src/reducers.js
new file mode 100644
index 0000000..edc67cf
--- /dev/null
+++ b/src/reducers.js
@@ -0,0 +1,10 @@
+
+import { combineReducers } from 'redux';
+
+import todos from '_reducers/todos';
+
+
+export default combineReducers({
+
+	todos,
+});
diff --git a/src/reducers/todos.js b/src/reducers/todos.js
new file mode 100644
index 0000000..43fedf5
--- /dev/null
+++ b/src/reducers/todos.js
@@ -0,0 +1,97 @@
+
+const initialState = {
+	list: [
+		{
+			id: '1',
+			name: 'item1',
+			priority: 'low',
+			completed: false,
+		},
+		{
+			id: '2',
+			name: 'item2',
+			priority: 'high',
+			completed: true,
+		},
+		{
+			id: '3',
+			name: 'item3',
+			priority: 'low',
+			completed: false,
+		},
+		{
+			id: '4',
+			name: 'item4',
+			priority: 'medium',
+			completed: false,
+		},
+	],
+	totalNum: 4,
+	completedNum: 1,
+};
+
+// handle ADD_TODO action
+const handleAddTodo = (state, action) => {
+	const newList = [
+		...state.list,
+		{
+			id: action.id,
+			name: action.name,
+			priority: action.priority,
+			completed: false,
+		},
+	];
+	return {
+		...state,
+		list: newList,
+		totalNum: newList.length,
+	};
+};
+
+// handle TOGGLE_TODO action
+const handleToggleTodo = (state, action) => {
+	const newList = state.list.map((item) => {
+		if (item.id === action.id) {
+			return {
+				...item,
+				completed: !item.completed,
+			};
+		}
+		return item;
+	});
+
+	let completedNum = 0;
+	newList.forEach((item) => {
+		if (item.completed) completedNum++;
+	});
+
+	return {
+		...state,
+		list: newList,
+		completedNum,
+	};
+};
+
+// handle DELETE_TODO action
+const handleDeleteTodo = (state, action) => {
+	const newList = state.list.filter((item) => item.id !== action.id);
+	const completedNum = newList.filter((item) => item.completed).length;
+	return {
+		...state,
+		list: newList,
+		totalNum: newList.length,
+		completedNum,
+	};
+};
+
+export default function todos(state = initialState, action) {
+	switch (action.type) {
+	case 'ADD_TODO':
+		return handleAddTodo(state, action);
+	case 'TOGGLE_TODO':
+		return handleToggleTodo(state, action);
+	case 'DELETE_TODO':
+		return handleDeleteTodo(state, action);
+	default: return state;
+	}
+}
diff --git a/src/static/img/avatar.jpg b/src/static/img/avatar.jpg
new file mode 100644
index 0000000000000000000000000000000000000000..0f498b7068f3dc01c83a2f9167201477460ba394
GIT binary patch
literal 626
zcmeAS@N?(olHy`uVBq!ia0vp^2SAtuNHCOdH@?llz+~y^;uuoF`1Tej*J}k4w}<cQ
z{q37rI6Wpb0Erh~_iWC8oLRyBe9eLN#p}O+toaDknV<*Kj{$hV#=?YuOEuexKH9Zk
zETP-a{>h_nS`EsTe~sq%g)^uuzyEAfrNhTx$@^}w>HNy>PIQ?2h2Qt8Rzmr&<#+Og
zH(0-{JGl7&&uA7lhN~}K*3Dw}vAUYVyWvGjx30s*mtC3-*I({YbqI1k$@icj>x66?
zgQu^mF~j<0dqfW`J7%Wbu;SPv!G_@Eb8HFW#k)BVta=tE+_2)=B2I^Z;)5&>Z#fTq
zW_-YKz?;LNx@O|X;79iLXFe9svNw_a7xZcQyp3M3p9dsuIZ?3vdc|CBzI8Kh>Hpl3
z_H@zi+N%wz{MT}CiO-9$On$k(_U)vj;bHx`tS}EV90*}xm@?^-j9P6lN3qw^8SHN?
zS=ZY?aXz)%*Ws-91$(h+F}{pheR1la4a21yazAFB(Z8K>Ky2=<*M_;3JvO!c&c+MW
z*5~~U$!D7qId}Hy-UgeOP0MP86{=&WoHu7UwS;^2siO^6uOB_DQcWn`WwSkw&7vt!
zQ|3BD*Ja<GMXU<1j}_HBTv>bcUc-vn-L;IX^YY(v-Y{9PR{lYO)CB8YjA^`??^rdY
zLSC|PNQJy$ULh6smMOw?%~o!OjEIHY2QnkpaXT=-X0(Wt4S;(J2jjr?drZ3)>{?W@
R<Y)~@iKnZd%Q~loCIFQY_Fe!0

literal 0
HcmV?d00001

diff --git a/src/style.less b/src/style.less
new file mode 100644
index 0000000..ea07978
--- /dev/null
+++ b/src/style.less
@@ -0,0 +1,31 @@
+body {
+	margin: auto;
+	font-family: "apercu", sans-serif;
+	font-size: 16px;
+}
+
+h1 {
+	margin: 0;
+	text-align: center;
+}
+
+a {
+	color: inherit;
+}
+
+a:hover {
+	color: unset;
+	text-decoration: none;
+	cursor: pointer;
+}
+
+img {
+	max-width: 100%;
+	width: auto;
+	height: auto;
+}
+
+pre {
+	font-size: inherit;
+	margin: 0;
+}
diff --git a/src/themes/PageTheme.js b/src/themes/PageTheme.js
new file mode 100644
index 0000000..ce9726d
--- /dev/null
+++ b/src/themes/PageTheme.js
@@ -0,0 +1,13 @@
+import React from 'react';
+
+import Routers from './Routers';
+
+export default function PageTemplate() {
+	return (
+		<div id="page">
+			<main className="container">
+				<Routers />
+			</main>
+		</div>
+	);
+}
diff --git a/src/themes/Routers.js b/src/themes/Routers.js
new file mode 100644
index 0000000..d95b993
--- /dev/null
+++ b/src/themes/Routers.js
@@ -0,0 +1,16 @@
+import React from 'react';
+import { Route, Switch } from 'react-router-dom';
+
+import Home from '_pages/Home';
+import Todos from '_pages/Todos/index';
+import NotFound from '_pages/NotFound';
+
+const Routers = () => (
+	<Switch>
+		<Route exact path="/" component={Home} />
+		<Route exact path="/todos" component={Todos} />
+
+		<Route path="*" component={NotFound} />
+	</Switch>
+);
+export default Routers;
diff --git a/src/themes/page.less b/src/themes/page.less
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/src/themes/page.less
@@ -0,0 +1 @@
+
diff --git a/src/utilis/todos.js b/src/utilis/todos.js
new file mode 100644
index 0000000..23b830d
--- /dev/null
+++ b/src/utilis/todos.js
@@ -0,0 +1,41 @@
+import TodosColumn from '../constants/TodosColumn';
+
+function getPriorityNum(priority) {
+	switch (priority) {
+	case 'high': return 3;
+	case 'medium': return 2;
+	case 'low': return 1;
+	default: return 0;
+	}
+}
+
+/**
+ * sort todos list
+ *
+ * @param {array} todos
+ * @param {enum} sortBy sort by name or priority
+ * @returns {array} sorted new todos list
+ */
+export function sortTodosList(todos = [], sortBy = TodosColumn.NAME) {
+	if (sortBy === 'name') {
+		return todos.sort(function (a, b) {
+			const nameA = a.name.toUpperCase();
+			const nameB = b.name.toUpperCase();
+			if (nameA < nameB) {
+				return -1;
+			}
+			if (nameA > nameB) {
+				return 1;
+			}
+
+			return 0;
+		});
+	}
+
+	if (sortBy === 'priority') {
+		return todos.sort(function (a, b) {
+			return getPriorityNum(b.priority) - getPriorityNum(a.priority);
+		});
+	}
+	return [];
+}
diff --git a/tests/data/initialState.js b/tests/data/initialState.js
new file mode 100644
index 0000000..a734b20
--- /dev/null
+++ b/tests/data/initialState.js
@@ -0,0 +1,32 @@
+export const initialState = {
+	todos: {
+		list: [
+			{
+				id: '1',
+				name: 'item1',
+				priority: 'low',
+				completed: false,
+			},
+			{
+				id: '2',
+				name: 'item2',
+				priority: 'high',
+				completed: true,
+			},
+			{
+				id: '3',
+				name: 'item3',
+				priority: 'low',
+				completed: false,
+			},
+			{
+				id: '4',
+				name: 'item4',
+				priority: 'medium',
+				completed: false,
+			},
+		],
+		totalNum: 4,
+		completedNum: 1,
+	},
+};
diff --git a/tests/unit/todos/component.test.js b/tests/unit/todos/component.test.js
new file mode 100644
index 0000000..169c842
--- /dev/null
+++ b/tests/unit/todos/component.test.js
@@ -0,0 +1,89 @@
+import { assert } from 'chai';
+import React from 'react';
+import { Provider } from 'react-redux';
+import configureStore from 'redux-mock-store';
+import { cleanup, render } from '@testing-library/react';
+
+import TodosAddNew from '../../../src/pages/Todos/TodosAddNew';
+import TodosBadges from '../../../src/pages/Todos/TodosBadges';
+import TodosItem from '../../../src/pages/Todos/TodosItem';
+import TodosList from '../../../src/pages/Todos/TodosList';
+import { initialState } from '../../data/initialState';
+
+describe('todos component', function () {
+	let mockStore = null;
+	beforeEach(function () {
+		mockStore = configureStore([]);
+	});
+
+	afterEach(function () {
+		mockStore = null;
+		cleanup();
+	});
+
+	it('should create TodosAddNew', () => {
+		const store = mockStore(initialState);
+		const { container } = render(
+			<Provider store={store}>
+				<TodosAddNew />
+			</Provider>,
+		);
+		const activeNode = container.querySelector('.TodosAddNew');
+		assert.exists(activeNode);
+	});
+
+	it('should create TodosBadges', () => {
+		const store = mockStore(initialState);
+		const { container } = render(
+			<Provider store={store}>
+				<TodosBadges />
+			</Provider>,
+		);
+		const activeNode = container.querySelector('.TodosBadges');
+		assert.exists(activeNode);
+		const badgesNodes = container.querySelectorAll('.TodosBadges .badge');
+		assert.strictEqual(badgesNodes.length, 2);
+		assert.strictEqual(badgesNodes[0].innerHTML, 'Total:4');
+		assert.strictEqual(badgesNodes[1].innerHTML, 'Completed:1');
+	});
+
+	it('should create TodosList', () => {
+		const store = mockStore(initialState);
+		const { container } = render(
+			<Provider store={store}>
+				<TodosList />
+			</Provider>,
+		);
+		const activeNode = container.querySelector('.TodosList');
+		assert.exists(activeNode);
+		const todosItemNodes = container.querySelectorAll('.TodosList .TodosItem');
+		assert.strictEqual(todosItemNodes.length, 4);
+	});
+
+	it('should create TodosItem', () => {
+		const store = mockStore(initialState);
+		const item = {
+			id: '1',
+			name: 'item1',
+			priority: 'low',
+			completed: false,
+		};
+		const { container } = render(
+			<Provider store={store}>
+				<TodosItem
+					key={item.id}
+					itemId={item.id}
+					priority={item.priority}
+					completed={item.completed}
+					name={item.name}
+				/>
+			</Provider>,
+		);
+		const activeNode = container.querySelector('.TodosItem');
+		assert.exists(activeNode);
+		const nameNodes = container.querySelector('.TodosItem .name');
+		assert.strictEqual(nameNodes.innerHTML, 'item1');
+		const priorityNodes = container.querySelector('.TodosItem .priority');
+		assert.strictEqual(priorityNodes.innerHTML, 'low');
+	});
+});
diff --git a/tests/unit/todos/reducer.test.js b/tests/unit/todos/reducer.test.js
new file mode 100644
index 0000000..136b939
--- /dev/null
+++ b/tests/unit/todos/reducer.test.js
@@ -0,0 +1,73 @@
+import { assert } from 'chai';
+import {
+	addTodo,
+	toggleTodo,
+	deleteTodo,
+} from '../../../src/actions/todos';
+import reducers from '../../../src/reducers/todos';
+import { initialState } from '../../data/initialState';
+
+const todosInitialState = initialState.todos;
+
+describe('todos reducer', function () {
+	afterEach(function () {
+		assert.deepEqual(todosInitialState, {
+			list: [
+				{
+					id: '1',
+					name: 'item1',
+					priority: 'low',
+					completed: false,
+				},
+				{
+					id: '2',
+					name: 'item2',
+					priority: 'high',
+					completed: true,
+				},
+				{
+					id: '3',
+					name: 'item3',
+					priority: 'low',
+					completed: false,
+				},
+				{
+					id: '4',
+					name: 'item4',
+					priority: 'medium',
+					completed: false,
+				},
+			],
+			totalNum: 4,
+			completedNum: 1,
+		});
+	});
+	it('should return the initial state', () => {
+		const res = reducers(undefined, {});
+		assert.deepEqual(res, todosInitialState);
+	});
+
+	it('should get add new todo', () => {
+		const res = reducers(todosInitialState, addTodo('testName', 'low'));
+		assert.strictEqual(res.list.length, 5);
+		assert.strictEqual(res.totalNum, 5);
+		assert.strictEqual(res.completedNum, 1);
+		assert.strictEqual(res.list[4].name, 'testName');
+		assert.strictEqual(res.list[4].priority, 'low');
+		assert.strictEqual(res.list[4].completed, false);
+	});
+
+	it('should change state to complete', () => {
+		const res = reducers(todosInitialState, toggleTodo('1'));
+		assert.strictEqual(res.list.length, 4);
+		assert.strictEqual(res.list[0].completed, true);
+		assert.strictEqual(res.completedNum, 2);
+	});
+
+	it('should delete the todo', () => {
+		const res = reducers(todosInitialState, deleteTodo('1'));
+		assert.strictEqual(res.list.length, 3);
+		assert.deepEqual(res.totalNum, 3);
+		assert.deepEqual(res.completedNum, 1);
+	});
+});
-- 
2.24.1.windows.2

